{"mappings":"gfAAAA,EAAA,aAEMC,EAAOC,SAASC,cAAc,SAC9BC,EAAQF,SAASC,cAAc,qBAC/BE,EAAOH,SAASC,cAAc,oBAC9BG,EAASJ,SAASC,cAAc,sBAEtCF,EAAKM,iBAAiB,UAGtB,SAAsBC,GACpBA,EAAIC,iBACJC,QAAQC,IAAIP,EAAMQ,OAClBF,QAAQC,IAAIN,EAAKO,OACjBF,QAAQC,IAAIL,EAAOM,UAGrB,IAAK,IAAIC,EAAI,EAAGA,GAAKP,EAAQO,GAAG,I","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst form = document.querySelector('.form');\nconst delay = document.querySelector('input[name=delay]');\nconst step = document.querySelector('input[name=step]');\nconst amount = document.querySelector('input[name=amount]');\n\nform.addEventListener('submit', onFormSubmit)\n\n\nfunction onFormSubmit(evt) {\n  evt.preventDefault();\n  console.log(delay.value);\n  console.log(step.value);\n  console.log(amount.value)\n \n}\nfor (let i = 1; i <= amount; i+=1){\n  const position = i;\n}\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  const promise = new Promise(() => {\n    setTimeout(() => {\n      if (shouldResolve) {\n         Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n  } else {\n    Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n  }\n}, delay)\n\n})\n\ncreatePromise(resolve,reject)\n  .then(({ position, delay }) => {\n    Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n  })\n  .catch(({ position, delay }) => {\n   Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n  });\n  \n}"],"names":["parcelRequire","$ce04d3a99e08e73b$var$form","document","querySelector","$ce04d3a99e08e73b$var$delay","$ce04d3a99e08e73b$var$step","$ce04d3a99e08e73b$var$amount","addEventListener","evt","preventDefault","console","log","value","$ce04d3a99e08e73b$var$i"],"version":3,"file":"03-promises.33682faa.js.map"}